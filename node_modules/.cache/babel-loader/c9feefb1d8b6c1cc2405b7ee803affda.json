{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/hp/Desktop/realtime editor/realtime-code-editor/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/hp/Desktop/realtime editor/realtime-code-editor/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/hp/Desktop/realtime editor/realtime-code-editor/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"C:/Users/hp/Desktop/realtime editor/realtime-code-editor/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"C:/Users/hp/Desktop/realtime editor/realtime-code-editor/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"C:/Users/hp/Desktop/realtime editor/realtime-code-editor/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/hp/Desktop/realtime editor/realtime-code-editor/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\n\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\n\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\n   * `Socket` constructor.\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n    /**\n     * Whether the socket is currently connected to the server.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.connected); // true\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.connected); // false\n     * });\n     */\n\n    _this.connected = false;\n    /**\n     * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n     * be transmitted by the server.\n     */\n\n    _this.recovered = false;\n    /**\n     * Buffer for packets received before the CONNECT packet\n     */\n\n    _this.receiveBuffer = [];\n    /**\n     * Buffer for packets that will be sent once the socket is connected\n     */\n\n    _this.sendBuffer = [];\n    /**\n     * The queue of packets to be sent with retry in case of failure.\n     *\n     * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n     * @private\n     */\n\n    _this._queue = [];\n    /**\n     * A sequence to generate the ID of the {@link QueuedPacket}.\n     * @private\n     */\n\n    _this._queueSeq = 0;\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n\n    _this._opts = Object.assign({}, opts);\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Whether the socket is currently disconnected\n   *\n   * @example\n   * const socket = io();\n   *\n   * socket.on(\"connect\", () => {\n   *   console.log(socket.disconnected); // false\n   * });\n   *\n   * socket.on(\"disconnect\", () => {\n   *   console.log(socket.disconnected); // true\n   * });\n   */\n\n\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n      }\n\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      args.unshift(ev);\n\n      if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n        this._addToQueue(args);\n\n        return this;\n      }\n\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false; // event ack callback\n\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        var ack = args.pop();\n\n        this._registerAckCallback(id, ack);\n\n        packet.id = id;\n      }\n\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n      if (discardPacket) {} else if (this.connected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n\n      var _a;\n\n      var timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      } // @ts-ignore\n\n\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n\n      this.acks[id] = function () {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        ack.apply(_this2, [null].concat(args));\n      };\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n\n  }, {\n    key: \"emitWithAck\",\n    value: function emitWithAck(ev) {\n      var _this3 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      // the timeout flag is optional\n      var withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n      return new Promise(function (resolve, reject) {\n        args.push(function (arg1, arg2) {\n          if (withErr) {\n            return arg1 ? reject(arg1) : resolve(arg2);\n          } else {\n            return resolve(arg1);\n          }\n        });\n\n        _this3.emit.apply(_this3, [ev].concat(args));\n      });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n\n  }, {\n    key: \"_addToQueue\",\n    value: function _addToQueue(args) {\n      var _this4 = this;\n\n      var ack;\n\n      if (typeof args[args.length - 1] === \"function\") {\n        ack = args.pop();\n      }\n\n      var packet = {\n        id: this._queueSeq++,\n        tryCount: 0,\n        pending: false,\n        args: args,\n        flags: Object.assign({\n          fromQueue: true\n        }, this.flags)\n      };\n      args.push(function (err) {\n        if (packet !== _this4._queue[0]) {\n          // the packet has already been acknowledged\n          return;\n        }\n\n        var hasError = err !== null;\n\n        if (hasError) {\n          if (packet.tryCount > _this4._opts.retries) {\n            _this4._queue.shift();\n\n            if (ack) {\n              ack(err);\n            }\n          }\n        } else {\n          _this4._queue.shift();\n\n          if (ack) {\n            for (var _len5 = arguments.length, responseArgs = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n              responseArgs[_key5 - 1] = arguments[_key5];\n            }\n\n            ack.apply(void 0, [null].concat(responseArgs));\n          }\n        }\n\n        packet.pending = false;\n        return _this4._drainQueue();\n      });\n\n      this._queue.push(packet);\n\n      this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"_drainQueue\",\n    value: function _drainQueue() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n      if (!this.connected || this._queue.length === 0) {\n        return;\n      }\n\n      var packet = this._queue[0];\n\n      if (packet.pending && !force) {\n        return;\n      }\n\n      packet.pending = true;\n      packet.tryCount++;\n      this.flags = packet.flags;\n      this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this5 = this;\n\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this5._sendConnectPacket(data);\n        });\n      } else {\n        this._sendConnectPacket(this.auth);\n      }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n\n  }, {\n    key: \"_sendConnectPacket\",\n    value: function _sendConnectPacket(data) {\n      this.packet({\n        type: PacketType.CONNECT,\n        data: this._pid ? Object.assign({\n          pid: this._pid,\n          offset: this._lastOffset\n        }, data) : data\n      });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            this.onconnect(packet.data.sid, packet.data.pid);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n\n          break;\n\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message); // @ts-ignore\n\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n\n        var _iterator = _createForOfIteratorHelper(listeners),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n\n      if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n        this._lastOffset = args[args.length - 1];\n      }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n\n        for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          args[_key6] = arguments[_key6];\n        }\n\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n\n      if (\"function\" === typeof ack) {\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {}\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id, pid) {\n      this.id = id;\n      this.recovered = pid && this._pid === pid;\n      this._pid = pid; // defined only if connection state recovery is enabled\n\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n\n      this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this6 = this;\n\n      this.receiveBuffer.forEach(function (args) {\n        return _this6.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this6.notifyOutgoingListeners(packet);\n\n        _this6.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      } // remove socket from pool\n\n\n      this.destroy();\n\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n\n      return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n\n      this._anyListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.push(listener);\n\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n\n      this._anyOutgoingListeners.unshift(listener);\n\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n\n  return Socket;\n}(Emitter);","map":{"version":3,"sources":["C:/Users/hp/Desktop/realtime editor/realtime-code-editor/node_modules/socket.io-client/build/esm/socket.js"],"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","io","nsp","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","subs","onopen","bind","onpacket","onerror","onclose","subEvents","_readyState","args","unshift","emit","apply","ev","hasOwnProperty","Error","toString","retries","fromQueue","volatile","_addToQueue","packet","type","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","notifyOutgoingListeners","push","_a","timeout","ackTimeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","withErr","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","hasError","shift","responseArgs","_drainQueue","force","_packet","_sendConnectPacket","CONNECT","_pid","pid","offset","_lastOffset","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","_anyOutgoingListeners"],"mappings":"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","sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        // the timeout flag is optional\n        const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n        return new Promise((resolve, reject) => {\n            args.push((arg1, arg2) => {\n                if (withErr) {\n                    return arg1 ? reject(arg1) : resolve(arg2);\n                }\n                else {\n                    return resolve(arg1);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}